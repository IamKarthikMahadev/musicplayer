// This file generated by ngrestcg
// For more information, please visit: https://github.com/loentar/ngrest

#include "playerProxy.h"
#include "MusicPlayer.h"
#include <iostream>
#include <string>
#include "MusicPlayerHandler.h"
const std::string SUCCESS = "success";
const std::string FAILED =  "failed";

#import <pthread.h>
#import <stdlib.h>
#import <stdio.h>
// Create a music player
// Create queue
// Write a queue monitor
// Read from queue
// Write to file

//void *MusicPlayer(void *anArg)
//{
//    int tArg;
//    
//    // retrieve the thread argument
//    tArg = *((int*)anArg);
//    //printf("DoTask:input:argument:%d\n", tArg);
//    std::string log_fileName =
//    FILE * pFile;
//    pFile = fopen ("./MusicPlayer","w");
//    
//    std::cout << "fopen";
//    if (pFile!=NULL)
//    {
//        fputs ("Music Player example To be done",pFile);
//        fclose (pFile);
//    }
//   
//    
//    //
//    // RUN THE REST OF THE TASK...
//    //
//}
//
//void StartMusicPlayer()
//{
//    pthread_t tID;
//    int tErr, tArg;
//   
//    // prepare the test argument
//    tArg = 5120;
//    
//    // create a pthread
//    tErr = pthread_create(&tID, NULL, MusicPlayer, &tArg);
//    
//}

void StartMusicPlayer()
{
    pthread_t tID;
    int tErr, tArg;

    // prepare the test argument
    tArg = 5120;

    // create a pthread
    tErr = pthread_create(&tID, NULL, MusicPlayer::MusicPlayerHandlerThread, &tArg);

}


playerProxy::playerProxy()
{
    
    StartMusicPlayer();
    
}
std::string playerProxy::AddToPlayList(const std::string& song)
{
    if(OSXMusicPlayer::Inst().AddToPlayList(song))
    {
        return SUCCESS;
    }
    return FAILED;

}

std::string playerProxy::RemoveFromPlayList(const std::string& song)
{
    if(OSXMusicPlayer::Inst().RemoveFromPlayList(song))
    {
        return SUCCESS;
    }
    return FAILED;
    
}

std::string playerProxy::Play()
{
    if(OSXMusicPlayer::Inst().Play())
    {
        return SUCCESS;
    }
    return FAILED;
}

std::string playerProxy::Pause()
{
    if(OSXMusicPlayer::Inst().Pause())
    {
        return SUCCESS;
    }
    return FAILED;
}

std::string playerProxy::Next()
{
    if(OSXMusicPlayer::Inst().Next())
    {
        return SUCCESS;
    }
    return FAILED;
    
}
std::string playerProxy::Prev()
{
    if(OSXMusicPlayer::Inst().Prev())
    {
        return SUCCESS;
    }
    return FAILED;
}

std::string playerProxy::GetCurrSong()
{
    return OSXMusicPlayer::Inst().GetCurrentSong();

}
